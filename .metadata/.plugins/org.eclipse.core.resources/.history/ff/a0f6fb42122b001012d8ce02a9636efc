package com.dating.bot.openAI;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.dating.bot.entity.AiProfile;

import java.util.List;

@Slf4j
@Component
public class LLMClient {

    private final String OLLAMA_URL = "http://localhost:11434/v1/chat/completions";

    public String generateReply(AiProfile profile, String userMessage) {
        RestTemplate restTemplate = new RestTemplate();

        MessagePayload payload = new MessagePayload();
        payload.setModel("tinydolphin");
        payload.setMessages(List.of(
            new Message("system", "You are " + profile.getFirstName() + 
                        ", a fun, flirty dating profile. Be engaging, short, and confident."),
            new Message("user", userMessage)
        ));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<MessagePayload> request = new HttpEntity<>(payload, headers);

        try {
            ResponseEntity<OllamaResponse> response = restTemplate.exchange(
                OLLAMA_URL,
                HttpMethod.POST,
                request,
                OllamaResponse.class
            );

            OllamaResponse body = response.getBody();
            log.info("üß† Ollama full response: {}", body);

            if (body != null && body.getChoices() != null && !body.getChoices().isEmpty()) {
                return body.getChoices().get(0).getMessage().getContent();
            }

            return "Sorry, I‚Äôm a bit shy right now!";
        } catch (Exception e) {
            log.error("‚ùå Error calling Ollama: ", e);
            return "Oops! Something went wrong with my brain.";
        }
    }

    @Data
    static class MessagePayload {
        private String model;
        private boolean stream = false;
        private List<Message> messages;
    }

    @Data
    static class Message {
        private String role;
        private String content;

        public Message(String role, String content) {
            this.role = role;
            this.content = content;
        }
    }

    @Data
    static class OllamaResponse {
        private List<Choice> choices;

        @Data
        static class Choice {
            private MessageContent message;
        }

        @Data
        static class MessageContent {
            private String role;
            private String content;
        }
    }
}
